# -*- coding: utf-8 -*-
"""pdp.v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q6NWiH_MSZWk0POYW8UFur4_NUx8r2RR
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")

dataframe = pd.read_csv('static/dataset/dataset.csv')
dataframe.head()

#drop kolom yang tidak perlu
dataframe.drop('NamaPembeli', axis=1, inplace=True)
dataframe.head()

datatest = pd.read_csv('./static/dataset/datatest.csv')
datatest.head()

datatest.drop('NamaPembeli', axis=1, inplace=True)
datatest.head()

#dataframe = dataframe.astype({"Menikah":'object', "Kelamin":'object', "Pendidikan":'object', "Pekerjaan":'object', "JenisProperti":'object', "Tanggungan":'object',"PersetujuanPembelian":'Object'})
dataframe.columns

dataframe.isnull().sum()

dataframe.dtypes

dataframe[['KelaminInt', 'Kelamin']].value_counts().plot.bar(title='Kelamin')
plt.show()
dataframe[['MenikahInt', 'Menikah']].value_counts().plot.bar(title='Menikah')
plt.show()
dataframe[['TanggunganInt', 'Tanggungan']].value_counts().plot.bar(title='Tanggungan')
plt.show()
dataframe[['PendidikanInt', 'Pendidikan']].value_counts().plot.bar(title='Pendidikan')
plt.show()
dataframe[['PekerjaanInt', 'Pekerjaan']].value_counts().plot.bar(title='Pekerjaan')
plt.show()
dataframe[['PendapatanUtamaInt', 'PendapatanUtama']].value_counts().plot.bar(title='Pendapatan Utama')
plt.show()
dataframe[['PemasukanTambahanInt', 'PemasukanTambahan']].value_counts().plot.bar(title='Pemasukan Tambahan')
plt.show()
dataframe[['JenisPropertiInt', 'JenisProperti']].value_counts().plot.bar(title='Jenis Properti')
plt.show()
dataframe['BiayaRumahTanah'].value_counts().plot.bar(title='Biaya Rumah Tanah')
plt.show()
dataframe['UangMuka'].value_counts().plot.bar(title='Uang Muka')
plt.show()
dataframe['PeriodeCicilan'].value_counts().plot.bar(title='Periode Cicilan')
plt.show()
dataframe[['RiwayatPinjamanInt', 'RiwayatPinjaman']].value_counts().plot.bar(title='Riwayat Pinjaman')
plt.show()

dataframe[['PersetujuanPembelianInt','PersetujuanPembelian']].value_counts().plot.bar(title="Persetujuan Pembelian")

sns.distplot(dataframe['BiayaRumahTanah'])
plt.show()
dataframe['BiayaRumahTanah'].plot.box(figsize=(8,5))
plt.show()

sns.distplot(dataframe['UangMuka'])
plt.show()
dataframe['UangMuka'].plot.box(figsize=(8,5))
plt.show()

#mengetahui hubungan variabel masukan dengan keluaran
#Jenis Kelamin
Kelamin=pd.crosstab(dataframe['Kelamin'],dataframe['PersetujuanPembelian'])
Kelamin.div(Kelamin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Menikah
Menikah=pd.crosstab(dataframe['Menikah'],dataframe['PersetujuanPembelian'])
Menikah.div(Menikah.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Tanggungan
Tanggungan=pd.crosstab(dataframe['Tanggungan'],dataframe['PersetujuanPembelian'])
Tanggungan.div(Tanggungan.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Pendidikan
Pendidikan=pd.crosstab(dataframe['Pendidikan'],dataframe['PersetujuanPembelian'])
Pendidikan.div(Pendidikan.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Pekerjaan
Pekerjaan=pd.crosstab(dataframe['Pekerjaan'],dataframe['PersetujuanPembelian'])
Pekerjaan.div(Pekerjaan.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Rumah atau Tanah
JenisProperti=pd.crosstab(dataframe['JenisProperti'],dataframe['PersetujuanPembelian'])
JenisProperti.div(JenisProperti.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Biaya Rumah/Tanah
BiayaRumahTanah=pd.crosstab(dataframe['BiayaRumahTanah'],dataframe['PersetujuanPembelian'])
BiayaRumahTanah.div(BiayaRumahTanah.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Uang Muka
UangMuka=pd.crosstab(dataframe['UangMuka'],dataframe['PersetujuanPembelian'])
UangMuka.div(UangMuka.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Periode Cicilan
PeriodeCicilan=pd.crosstab(dataframe['PeriodeCicilan'],dataframe['PersetujuanPembelian'])
PeriodeCicilan.div(PeriodeCicilan.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Riwayat Pinjaman
RiwayatPinjaman=pd.crosstab(dataframe['RiwayatPinjaman'],dataframe['PersetujuanPembelian'])
RiwayatPinjaman.div(RiwayatPinjaman.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

#Pendapatan Utama
PendapatanUtama=pd.crosstab(dataframe['PendapatanUtama'],dataframe['PersetujuanPembelian'])
PendapatanUtama.div(PendapatanUtama.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Pemasukan Tambahan
PemasukanTambahan=pd.crosstab(dataframe['PemasukanTambahan'],dataframe['PersetujuanPembelian'])
PemasukanTambahan.div(PemasukanTambahan.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()
#Total Pendapatan = Pendapatan Utama + Pemasukan Tambahan
dataframe['PendapatanTotal']=dataframe['PendapatanUtamaInt']+dataframe['PemasukanTambahanInt']
bins=[0,2.5,5,7.5,10]
group=['Miskin','Kurang','Cukup','Kaya']
dataframe['TotalPendapatan']=pd.cut(dataframe['PendapatanTotal'],bins,labels=group)
Total_Income_bin=pd.crosstab(dataframe['TotalPendapatan'],dataframe['PersetujuanPembelian'])
Total_Income_bin.div(Total_Income_bin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.xlabel('Pendapatan Total')
P=plt.ylabel('Persentase')

X = dataframe[['KelaminInt', 'MenikahInt', 'TanggunganInt', 'PendidikanInt', 'PekerjaanInt', 'PendapatanUtamaInt', 'PemasukanTambahanInt', 'JenisPropertiInt', 'BiayaRumahTanah', 'UangMuka', 'PeriodeCicilan', 'RiwayatPinjamanInt' ]]
Y = dataframe[['PersetujuanPembelianInt']]
Z = datatest[['KelaminInt', 'MenikahInt', 'TanggunganInt', 'PendidikanInt', 'PekerjaanInt', 'PendapatanUtamaInt', 'PemasukanTambahanInt', 'JenisPropertiInt', 'BiayaRumahTanah', 'UangMuka', 'PeriodeCicilan', 'RiwayatPinjamanInt' ]]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=1)

#Model Building:Part 1
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#copy data
X_train_model1=X_train.copy()
X_test_model1=X_test.copy()
Y_train_model1=Y_train.copy()
Y_test_model1=Y_test.copy()

model = LogisticRegression().fit(X_train_model1, Y_train_model1)
print(model)

akurasi = accuracy_score(Y_test_model1, model.predict(X_test_model1))
print(akurasi)

pred_test = model.predict(Z)
print(pred_test)

#Model 2
#1. Logistic Regression
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics

i=1
mean = 0
kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)
for train_index,test_index in kf.split(X,Y):
  print ('\n{} of kfold {} '.format(i,kf.n_splits))
  lr_xtr,lr_xvl = X.loc[train_index],X.loc[test_index]
  lr_ytr,lr_yvl = Y.loc[train_index],Y.loc[test_index]
  model = LogisticRegression(random_state=1)
  model.fit(lr_xtr,lr_ytr)
  pred_test=model.predict(lr_xvl)
  score=accuracy_score(yvl,pred_test)
  mean += score
  print ('accuracy_score',score)
  i+=1
  pred_lr = model.predict_proba(lr_xvl)[:,1]
  pred_test_lr = model.predict(Z)
print ('\n Mean Validation Accuracy: ',mean/(i-1))
print ('\n Prediction Accuracy: ', pred_test_lr)

lr_fpr, lr_tpr, _ = metrics.roc_curve(lr_yvl, pred_lr)
auc = metrics.roc_auc_score(lr_yvl, pred_lr)
plt.figure(figsize=(10,8))
plt.plot(lr_fpr, lr_tpr, label="validation, auc="+str(auc))
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc=4)
plt.show()

#2. Decision Tree
from sklearn import tree

i=1
mean = 0
kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)
for train_index,test_index in kf.split(X,Y):
  print ('\n{} of kfold {} '.format(i,kf.n_splits))
  dt_xtr,dt_xvl = X.loc[train_index],X.loc[test_index]
  dt_ytr,dt_yvl = Y.loc[train_index],Y.loc[test_index]
  model = tree.DecisionTreeClassifier(random_state=1)
  model.fit(dt_xtr,dt_ytr)
  pred_test = model.predict(dt_xvl)
  score = accuracy_score(dt_yvl,pred_test)
  mean += score
  print ('accuracy_score',score)
  i+=1
  pred_dt = model.predict_proba(dt_xvl)[:,1]
  pred_test_dt = model.predict(Z)
print ('\n Mean Validation Accuracy: ',mean/(i-1))
print ('\n Prediction Accuracy: ', pred_test_dt)

dt_fpr, dt_tpr, _ = metrics.roc_curve(dt_yvl, pred_dt)
auc = metrics.roc_auc_score(dt_yvl, pred_dt)
plt.figure(figsize=(10,8))
plt.plot(dt_fpr, dt_tpr, label="validation, auc="+str(auc))
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc=4)
plt.show()

#3. Random Forest
from sklearn.ensemble import RandomForestClassifier

i=1
mean = 0
kf = StratifiedKFold(n_splits=5,random_state=1,shuffle=True)
for train_index,test_index in kf.split(X,Y):
  print ('\n{} of kfold {} '.format(i,kf.n_splits))
  rf_xtr,rf_xvl = X.loc[train_index],X.loc[test_index]
  rf_ytr,rf_yvl = Y.loc[train_index],Y.loc[test_index]
  model = RandomForestClassifier(random_state=1, max_depth=10)
  model.fit(rf_xtr,rf_ytr)
  pred_test = model.predict(rf_xvl)
  score = accuracy_score(rf_yvl,pred_test)
  mean += score
  print ('accuracy_score',score)
  i+=1
  pred_rf = model.predict_proba(rf_xvl)[:,1]
  pred_test_rf = model.predict(Z)
print ('\n Mean Validation Accuracy: ',mean/(i-1))
print ('\n Prediction Accuracy: ', pred_test_rf)

rf_fpr, rf_tpr, _ = metrics.roc_curve(rf_yvl, pred_rf)
auc = metrics.roc_auc_score(rf_yvl, pred_rf)
plt.figure(figsize=(10,8))
plt.plot(rf_fpr, rf_tpr, label="validation, auc="+str(auc))
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc=4)
plt.show()
